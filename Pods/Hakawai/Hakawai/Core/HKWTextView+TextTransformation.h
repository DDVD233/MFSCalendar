//
//  HKWTextView+TextTransformation.h
//  Hakawai
//
//  Copyright (c) 2014 LinkedIn Corp. All rights reserved.
//  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
//  the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
//  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//

#import "HKWTextView.h"

/*!
 This category provides additional methods intended to be useful for text and attribute transformation. These methods
 are conceptually self-contained, so it should not be difficult to adapt them for use elsewhere (in particular, if you
 don't wish to use any of the other features). They may be used by plug-ins as well.
 */
@interface HKWTextView (TextTransformation)

#pragma mark - API (text transformation)

/*!
 Replace the currently selected text with an arbitrary attributed string generated by a transformer block. If no text is
 selected, this method does nothing.

 \param transformer    a block which takes as input an attributed string corresponding to the originally selected text,
 and outputs an attributed string which should replace the selected text
 */
- (void)transformSelectedTextWithTransformer:(NSAttributedString *(^)(NSAttributedString *))transformer;

/*!
 Given a selection range and a transformer block, replace the text within that range with an arbitrary attributed string
 generated by a transformer block.

 \param range          the range of the text within the text view to transform. If the range extends past the end of the
 original text, it is automatically truncated. If the range begins past the end of the original
 text, this method does nothing.
 \param transformer    a block which takes as input an attributed string corresponding to the text within the \c range
 parameter, and outputs an attributed string which should replace the selected text
 */
- (void)transformTextAtRange:(NSRange)range
             withTransformer:(NSAttributedString *(^)(NSAttributedString *))transformer;

/*!
 Insert plain text at an index location within the text view's attributed text. The text is formatted with the default
 attributes contained within the \c typingAttributes dictionary
 */
- (void)insertPlainText:(NSString *)text location:(NSUInteger)location;

/*!
 Insert attributed text at an index location within the text view's attributed text.
 */
- (void)insertAttributedText:(NSAttributedString *)text location:(NSUInteger)location;

/*!
 Insert a text attachment at a location within the text view's attributed text.
 */
- (void)insertTextAttachment:(NSTextAttachment *)attachment location:(NSUInteger)location;

/*!
 Excise text from the text view's attributed text, within a given range.
 */
- (void)removeTextForRange:(NSRange)range;


#pragma mark - API (attributes transformation)

/*!
 Add an attribute to be added to all subsequent text inserted.
 */
- (void)activateCustomAttributeWithName:(NSString *)name value:(id)value;

/*!
 Remove a previously added attribute, preventing it from being applied to any more inserted text.
 */
- (void)deactivateCustomAttributeWithName:(NSString *)name;

/*!
 Remove all previously added attributes.
 */
- (void)deactivateAllCustomAttributes;

/*!
 Remove an attribute with a given name from text within a given range.
 */
- (void)stripAttributeFromTextAtRange:(NSRange)range attributeName:(NSString *)attributeName;

/*!
 Replace the current value of the text view's \c typingAttributes dictionary with a new attributes dictionary generated
 by a transformer block.
 */
- (void)transformTypingAttributesWithTransformer:(NSDictionary *(^)(NSDictionary *currentAttributes))transformer;

@end
